MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=3.000
fGammaAdj=2.000
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=1.000
fWarpScale=0.325
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=-0.18000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.000
wave_g=0.400
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=1.000
ob_g=1.000
ob_b=1.000
ob_a=0.000
ib_size=0.200
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=44.800
nMotionVectorsY=24.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=12
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.100
wave_0_per_point1=u = abs(cos(q1*0.1))*3.14159;
wave_0_per_point2=v = abs(cos(q1*0.015))*3.14159*2;
wave_0_per_point3=s = sample*3.14*100;
wave_0_per_point4=ss = sample*6.28*1000;
wave_0_per_point5=
wave_0_per_point6=zg = sample*0.1;
wave_0_per_point7=
wave_0_per_point8=angfast = sin(sample*6.28 + q1*0.2)*30.28;
wave_0_per_point9=
wave_0_per_point10=//draw 1 torus
wave_0_per_point11=xtor = (0.6 + 0.1*cos(s))*cos(ss);
wave_0_per_point12=ytor = (0.6 + 0.1*cos(s))*sin(ss);
wave_0_per_point13=ztor = 0.1*sin(s);
wave_0_per_point14=
wave_0_per_point15=//draw 2 sphere
wave_0_per_point16=xsph = 0.6*sin(s)*cos(ss);
wave_0_per_point17=ysph = 0.6*sin(s)*sin(ss);
wave_0_per_point18=zsph = 0.6*cos(s)*zg*cos(angfast);
wave_0_per_point19=
wave_0_per_point20=//draw 3 double cone
wave_0_per_point21=xcon = 0.6*sin(s)*cos(ss);
wave_0_per_point22=ycon = 0.6*sin(s)*sin(ss);
wave_0_per_point23=zcon = 0.6*sin(s)*zg*cos(angfast);
wave_0_per_point24=
wave_0_per_point25=//draw 4 cylinder (kinda)
wave_0_per_point26=xcyl = 0.6*sin(s);
wave_0_per_point27=ycyl = 0.6*cos(s);
wave_0_per_point28=zcyl = 0.6*cos(ss)*1.2;
wave_0_per_point29=
wave_0_per_point30=
wave_0_per_point31=//warp
wave_0_per_point32=//use simple fuzzy logic to model zooming
wave_0_per_point33=//activations approx sawtooth with sin curve
wave_0_per_point34=f1 = sin(q5*0.1 - 1.5707);
wave_0_per_point35=f2 = sin(q5*0.1);
wave_0_per_point36=f3 = sin(q5*0.1 + 1.5707);
wave_0_per_point37=f4 = sin(q5*0.1 + 3.14);
wave_0_per_point38=
wave_0_per_point39=//take only values above zero
wave_0_per_point40=f1 = f1*above(f1,0);
wave_0_per_point41=f2 = f2*above(f2,0);
wave_0_per_point42=f3 = f3*above(f3,0);
wave_0_per_point43=f4 = f4*above(f4,0);
wave_0_per_point44=
wave_0_per_point45=
wave_0_per_point46=xs = f1*xsph + f2*xtor - f3*xcon + f4*xcyl;
wave_0_per_point47=ys = f1*ysph + f2*ytor - f3*ycon + f4*ycyl;
wave_0_per_point48=zs = f1*zsph + f2*ztor - f3*zcon + f4*zcyl;
wave_0_per_point49=
wave_0_per_point50=
wave_0_per_point51=//rotate x axis
wave_0_per_point52=angle = sin(q5*0.055)*6.28;
wave_0_per_point53=yx = ys*cos(angle) - zs*sin(angle);
wave_0_per_point54=zx = ys*sin(angle) + zs*cos(angle);
wave_0_per_point55=xx = xs;
wave_0_per_point56=
wave_0_per_point57=//rotate y axis
wave_0_per_point58=angle2 = sin(q5*0.03)*6.28;
wave_0_per_point59=xd = xx*cos(angle2) - zx*sin(angle2);
wave_0_per_point60=zd = xx*sin(angle2) + zx*cos(angle2);
wave_0_per_point61=yd = yx;
wave_0_per_point62=
wave_0_per_point63=//rotaye z axis
wave_0_per_point64=angle3 = sin(q5*0.042)*6.28;
wave_0_per_point65=xn = xd*cos(angle3) - yd*sin(angle3);
wave_0_per_point66=yn = xd*sin(angle3) + yd*cos(angle3);
wave_0_per_point67=
wave_0_per_point68=zd = zd;
wave_0_per_point69=
wave_0_per_point70=x = xn*zd*0.9 + 0.5;
wave_0_per_point71=y = yn*zd*1.2*0.9 + 0.5;
wave_0_per_point72=
wave_0_per_point73=r = 0.5 + 0.5*sin(q5*1.2 + x + x);
wave_0_per_point74=g = 0.5 + 0.5*sin(q5*1.5 + x + y);
wave_0_per_point75=b = 0.5 + 0.5*sin(q5*1.36 + y + y);
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=12
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=u = abs(cos(q1*0.1))*3.14159;
wave_1_per_point2=v = abs(cos(q1*0.015))*3.14159*2;
wave_1_per_point3=s = sample*3.14*100;
wave_1_per_point4=ss = sample*6.28*1000;
wave_1_per_point5=
wave_1_per_point6=zg = sample*0.1;
wave_1_per_point7=
wave_1_per_point8=angfast = sin(sample*6.28 + q1*0.2)*30.28;
wave_1_per_point9=
wave_1_per_point10=//draw 1 torus
wave_1_per_point11=xtor = (0.6 + 0.1*cos(s))*cos(ss);
wave_1_per_point12=ytor = (0.6 + 0.1*cos(s))*sin(ss);
wave_1_per_point13=ztor = 0.1*sin(s);
wave_1_per_point14=
wave_1_per_point15=//draw 2 sphere
wave_1_per_point16=xsph = 0.6*sin(s)*cos(ss);
wave_1_per_point17=ysph = 0.6*sin(s)*sin(ss);
wave_1_per_point18=zsph = 0.6*cos(s)*zg*cos(angfast);
wave_1_per_point19=
wave_1_per_point20=//draw 3 double cone
wave_1_per_point21=xcon = 0.6*sin(s)*cos(ss);
wave_1_per_point22=ycon = 0.6*sin(s)*sin(ss);
wave_1_per_point23=zcon = 0.6*sin(s)*zg*cos(angfast);
wave_1_per_point24=
wave_1_per_point25=//draw 4 cylinder (kinda)
wave_1_per_point26=xcyl = 0.6*sin(s);
wave_1_per_point27=ycyl = 0.6*cos(s);
wave_1_per_point28=zcyl = 0.6*cos(ss)*1.2;
wave_1_per_point29=
wave_1_per_point30=
wave_1_per_point31=//warp
wave_1_per_point32=//use simple fuzzy logic to model zooming
wave_1_per_point33=//activations approx sawtooth with sin curve
wave_1_per_point34=f1 = sin(q5*0.1 - 1.5707);
wave_1_per_point35=f2 = sin(q5*0.1);
wave_1_per_point36=f3 = sin(q5*0.1 + 1.5707);
wave_1_per_point37=f4 = sin(q5*0.1 + 3.14);
wave_1_per_point38=
wave_1_per_point39=//take only values above zero
wave_1_per_point40=f1 = f1*above(f1,0);
wave_1_per_point41=f2 = f2*above(f2,0);
wave_1_per_point42=f3 = f3*above(f3,0);
wave_1_per_point43=f4 = f4*above(f4,0);
wave_1_per_point44=
wave_1_per_point45=
wave_1_per_point46=xs = f1*xsph + f2*xtor - f3*xcon + f4*xcyl;
wave_1_per_point47=ys = f1*ysph + f2*ytor - f3*ycon + f4*ycyl;
wave_1_per_point48=zs = f1*zsph + f2*ztor - f3*zcon + f4*zcyl;
wave_1_per_point49=
wave_1_per_point50=
wave_1_per_point51=//rotate x axis
wave_1_per_point52=angle = sin(q5*0.055)*6.28;
wave_1_per_point53=yx = ys*cos(angle) - zs*sin(angle);
wave_1_per_point54=zx = ys*sin(angle) + zs*cos(angle);
wave_1_per_point55=xx = xs;
wave_1_per_point56=
wave_1_per_point57=//rotate y axis
wave_1_per_point58=angle2 = sin(q5*0.03)*6.28;
wave_1_per_point59=xd = xx*cos(angle2) - zx*sin(angle2);
wave_1_per_point60=zd = xx*sin(angle2) + zx*cos(angle2);
wave_1_per_point61=yd = yx;
wave_1_per_point62=
wave_1_per_point63=//rotaye z axis
wave_1_per_point64=angle3 = sin(q5*0.042)*6.28;
wave_1_per_point65=xn = xd*cos(angle3) - yd*sin(angle3);
wave_1_per_point66=yn = xd*sin(angle3) + yd*cos(angle3);
wave_1_per_point67=
wave_1_per_point68=zd = zd;
wave_1_per_point69=
wave_1_per_point70=x = xn*zd*0.9 + 0.5;
wave_1_per_point71=y = yn*zd*1.2*0.9 + 0.5;
wave_1_per_point72=
wave_1_per_point73=
wave_1_per_point74=r = 1;//0.5 + 0.5*sin(q1*1.2 + x + x);
wave_1_per_point75=g = 1;//0.5 + 0.5*sin(q1*1.5 + x + y);
wave_1_per_point76=b = 1;//0.5 + 0.5*sin(q1*1.36 + y + y);
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_point1=speed = bass*0.3;
wave_2_per_point2=v = sample*10000 + value2*bass*0.1;
wave_2_per_point3=
wave_2_per_point4=//state 0 elipse
wave_2_per_point5=xs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);
wave_2_per_point6=ys = ys + (equal(0,q1))*sin(v*1)*speed;
wave_2_per_point7=
wave_2_per_point8=x = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);
wave_2_per_point9=y = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);
wave_2_per_point10=
wave_2_per_point11=x = x + sample*0.1;
wave_2_per_point12=
wave_2_per_point13=x = x*0.6 + 0.2;
wave_2_per_point14=y = y + bass*0.1;
wave_2_per_point15=y = y*0.8;
wave_2_per_point16=
wave_2_per_point17=r = 0.5 + 0.5*sin(time*6.22) + 0.1;
wave_2_per_point18=g = 0.4 + 0.4*sin(time*5.307);
wave_2_per_point19=b = 0.4 + 0.4*sin(time*4.959)*x;
wave_2_per_point20=
wave_2_per_point21=xs = if(above(xs,1000),0 ,xs);
wave_2_per_point22=ys = if(above(ys,1000),0 ,ys);
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_point1=speed = bass*0.1;
wave_3_per_point2=v = sample*10000 + value2*bass*0.1;
wave_3_per_point3=
wave_3_per_point4=//state 0 elipse
wave_3_per_point5=xs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);
wave_3_per_point6=ys = ys + (equal(0,q1))*sin(v*1)*speed;
wave_3_per_point7=
wave_3_per_point8=x = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);
wave_3_per_point9=y = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);
wave_3_per_point10=
wave_3_per_point11=y = y - sample*0.1;
wave_3_per_point12=
wave_3_per_point13=x = x*0.6 + 0.2;
wave_3_per_point14=y = y + bass*0.1;
wave_3_per_point15=y = y*0.8;
wave_3_per_point16=
wave_3_per_point17=r = 0.5 + 0.5*sin(time*6.22) + 0.1;
wave_3_per_point18=g = 0.4 + 0.4*sin(time*5.307);
wave_3_per_point19=b = 0.4 + 0.4*sin(time*4.959)*x;
wave_3_per_point20=
wave_3_per_point21=xs = if(above(xs,1000),0 ,xs);
wave_3_per_point22=ys = if(above(ys,1000),0 ,ys);
shapecode_0_enabled=1
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=2.66710
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.27425
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.200
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.400
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.100
shape_0_per_frame1=tex_capture  = q1;
shape_0_per_frame2=
shape_0_per_frame3=r = 0.5 +0.5*sin(q5*1.02);
shape_0_per_frame4=g = 0.5 +0.5*sin(q5*1.52);
shape_0_per_frame5=b = 0.5 +0.5*sin(q5*1.982);
shape_0_per_frame6=
shape_0_per_frame7=r2 = 0.5 +0.5*sin(q5*0.32);
shape_0_per_frame8=g2 = 0.5 +0.5*sin(q5*0.32);
shape_0_per_frame9=b2 = 0.5 +0.5*sin(q5*0.2382);
shape_0_per_frame10=
shape_0_per_frame11=saw = saw - 0.001*bass;
shape_0_per_frame12=saw = if(below(saw,0.1),0.6,saw);
shape_0_per_frame13=
shape_0_per_frame14=tex_zoom = saw;
shapecode_1_enabled=1
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=2.66718
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.30293
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=0.200
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.400
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.100
shape_1_per_frame1=tex_capture  = q2;
shape_1_per_frame2=
shape_1_per_frame3=r = 0.5 +0.5*sin(q5*1.12);
shape_1_per_frame4=g = 0.5 +0.5*sin(q5*1.468);
shape_1_per_frame5=b = 0.5 +0.5*sin(q5*1.378);
shape_1_per_frame6=
shape_1_per_frame7=
shape_1_per_frame8=r2 = 0.5 +0.5*sin(q5*0.62);
shape_1_per_frame9=g2 = 0.5 +0.5*sin(q5*0.72);
shape_1_per_frame10=b2 = 0.5 +0.5*sin(q5*0.872);
shape_1_per_frame11=
shape_1_per_frame12=
shape_1_per_frame13=saw = saw - 0.0011*mid;
shape_1_per_frame14=saw = if(below(saw,0.1),0.6,saw);
shape_1_per_frame15=
shape_1_per_frame16=tex_zoom = saw;
shapecode_2_enabled=1
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=2.66718
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.36964
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=0.200
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.400
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shape_2_per_frame1=tex_capture  = q3;
shape_2_per_frame2=
shape_2_per_frame3=r = 0.5 +0.5*sin(q5*1.12);
shape_2_per_frame4=g = 0.5 +0.5*sin(q5*1.92);
shape_2_per_frame5=b = 0.5 +0.5*sin(q5*1.782);
shape_2_per_frame6=
shape_2_per_frame7=
shape_2_per_frame8=r = 0.5 +0.5*sin(q5*0.65);
shape_2_per_frame9=g = 0.5 +0.5*sin(q5*0.2);
shape_2_per_frame10=b = 0.5 +0.5*sin(q5*0.182);
shape_2_per_frame11=
shape_2_per_frame12=
shape_2_per_frame13=saw = saw + 0.00143*treb;
shape_2_per_frame14=saw = if(above(saw,0.6),0.1,saw);
shape_2_per_frame15=
shape_2_per_frame16=tex_zoom = saw;
shapecode_3_enabled=1
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=2.66718
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.30294
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=0.200
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.400
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
shape_3_per_frame1=tex_capture  = q4;
shape_3_per_frame2=
shape_3_per_frame3=
shape_3_per_frame4=r = 0.5 + 0.5*sin(q5*1.32);
shape_3_per_frame5=g = 0.5 + 0.5*sin(q5*1.52);
shape_3_per_frame6=b = 0.5 + 0.5*sin(q5*1.882);
shape_3_per_frame7=
shape_3_per_frame8=r = 0.5 +0.5*sin(q5*0.72);
shape_3_per_frame9=g = 0.5 +0.5*sin(q5*0.62);
shape_3_per_frame10=b = 0.5 +0.5*sin(q5*0.5482);
shape_3_per_frame11=
shape_3_per_frame12=
shape_3_per_frame13=saw = saw + 0.00178*bass;
shape_3_per_frame14=saw = if(above(saw,0.6),0.1,saw);
shape_3_per_frame15=
shape_3_per_frame16=tex_zoom = saw;
per_frame_1=//flexi mobius spiral col frame
per_frame_2=t = t + 2.5/fps;
per_frame_3=t = if(above(t,2),t-2,t);
per_frame_4=q22 = -t;
per_frame_5=// Flexis dampened sound response functions
per_frame_6=db = db*0.98 + bass_att*0.2; // dampener
per_frame_7=bb = bb + db*0.1; // accumulation, replace time expressions with this ;)
per_frame_8=dt = dt*0.98 + treb_att*0.2;
per_frame_9=tt = tt + dt*0.1;
per_frame_10=dm = dm*0.98 + mid_att*0.2;
per_frame_11=mm = mm + dm*0.1;
per_frame_12=//***** [q11-q18] variables for Flexis caleidoscope shader code *****
per_frame_13=// change
per_frame_14=q13 = 0.5 + sin((bb-mm)*0.1)*0.25; // center x
per_frame_15=q14 = 0.5 + sin((tt-mm)*0.1)*0.25; // center y
per_frame_16=w = (bb-tt)*0.1;                   // angle
per_frame_17=q16 = 0.8 - (db-dt)*0.04;         // size
per_frame_18=//don't change
per_frame_19=q11 = sin(w);
per_frame_20=q12 = cos(w);
per_frame_21=q17 = sin(-w);
per_frame_22=q18 = cos(-w);
per_frame_23=q15 = 1/q16;
per_frame_24=zoom =1;// 0.999;
per_frame_25=warp = 0;
per_frame_26=// a
per_frame_27=scale = 8;
per_frame_28=angle = -time*0.2;
per_frame_29=q1 = scale*cos(angle); // the real part
per_frame_30=q2 = scale*sin(angle); // the imaginary part
per_frame_31=// b
per_frame_32=q3 = 0; // the real part
per_frame_33=q4 = 0.3; // the imaginary part
per_frame_34=// c
per_frame_35=scale = 0.8;
per_frame_36=angle = time*0.2;
per_frame_37=q5 = scale*cos(angle); // the real part
per_frame_38=q6 = scale*sin(angle); // the imaginary part
per_frame_39=// d
per_frame_40=q7 = -0.25; // the real part
per_frame_41=q8 = 0.2; // the imaginary part
per_frame_42=q11 = 1/asin(1);
per_frame_43=//5 frame texture buffer
per_frame_44=
per_frame_45=basstime = basstime  + bass*0.13;
per_frame_46=q5 = basstime;
per_frame_47=
per_frame_48=state = state + 2.5;
per_frame_49=state = if(above(state,20),0,state);
per_frame_50=
per_frame_51=q1 = (equal(state,5));
per_frame_52=q2 = (equal(state,10));
per_frame_53=q3 = (equal(state,15));
per_frame_54=q4 = (equal(state,20));
per_frame_55=
per_frame_56=
per_frame_57=
per_frame_58=monitor = q1;
per_pixel_1=rot = cos(time)*0.1*sin(rad+time*0.9);
per_pixel_2=//decay = 1;
per_pixel_3=decay_g = x*sin(q5*1.1)*5;
per_pixel_4=decay_r = y*sin(q5*145)*6;
per_pixel_5=decay_b = rad*sin(q5)*7;
per_pixel_6=
per_pixel_7=zoom = 1.0;
per_pixel_8=rot = 0.00;
per_pixel_9=
per_pixel_10=warp = rad;
warp_1=`shader_body
warp_2=`{
warp_3=`float2 pixelsize = texsize.zw;
warp_4=`float2 uvm = uv;
warp_5=`
warp_6=`float2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;
warp_7=`float4 noiseVal = tex2D(sampler_noise_lq, noise_uv);
warp_8=`
warp_9=`ret.xyz = saturate(tex2D( sampler_pw_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));
warp_10=`ret.xyz = tex2D( sampler_pw_main,uvm).xyz;
warp_11=`
warp_12=`
warp_13=`float3 rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;
warp_14=`if (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {
warp_15=`ret.xy = rsamp.xy;
warp_16=`}
warp_17=`
warp_18=`rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;
warp_19=`if (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {
warp_20=`ret.xy = rsamp.xy;
warp_21=`}
warp_22=`
warp_23=`ret.z = tex2D(sampler_fw_main,ret.xy).z;
warp_24=`
warp_25=`ret.z -= q1*.005;
warp_26=`
warp_27=`}
comp_1=`sampler sampler_sunrise;
comp_2=`
comp_3=`float2 factorA, factorB, product;
comp_4=`float2 numerator, denominator, fraction;
comp_5=`
comp_6=`shader_body
comp_7=`{
comp_8=`float2 uvo = uv;
comp_9=`//*** Flexis Moebius transformation code
comp_10=`
comp_11=`uv = (uv-0.5)*aspect.xy*2;
comp_12=`factorA = uv;
comp_13=`factorB = float2(q1,q2);
comp_14=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part
comp_15=`                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part
comp_16=`
comp_17=`numerator = product + float2(q3,q4);
comp_18=`
comp_19=`factorA = uv;
comp_20=`factorB = float2(q5,q6);
comp_21=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part
comp_22=`                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part
comp_23=`
comp_24=`
comp_25=`denominator = product + float2(q7,q8);
comp_26=`
comp_27=`fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_28=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_29=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_30=`
comp_31=`uv = fraction*0.5;
comp_32=`
comp_33=`// ***
comp_34=`
comp_35=`
comp_36=`// *** Flexis logarithmic spiral code
comp_37=`
comp_38=`float t = -time*0.5; // set velocity here
comp_39=`float2 c = (uv-0.5);
comp_40=`float1 ang_hq = -atan2(c.x,c.y);
comp_41=`// q11 = 1/asin(1); from the init section
comp_42=`float2 spiral = float2(ang_hq*q11*3+t,aspect.w*log(length(c))+ang_hq*q11-t);
comp_43=`spiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*0.95; // mirror
comp_44=`uv = spiral;
comp_45=`
comp_46=`// ***
comp_47=`
comp_48=`ret = tex2d(sampler_main,spiral);
comp_49=`//ret = GetPixel(uvo);
comp_50=`}
