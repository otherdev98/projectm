MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.000
fDecay=0.960
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=5
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.008
fWaveScale=0.010
fWaveSmoothing=0.540
fWaveParam=-0.300
fModWaveAlphaStart=0.390
fModWaveAlphaEnd=0.660
fWarpAnimSpeed=1.000
fWarpScale=3.138
fZoomExponent=1.60920
fShader=1.000
zoom=0.90700
rot=0.14000
cx=0.530
cy=0.500
dx=0.00000
dy=0.00000
warp=0.23800
sx=1.00990
sy=1.25710
wave_r=0.000
wave_g=1.000
wave_b=1.000
wave_x=0.490
wave_y=0.510
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.010
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.010
nMotionVectorsX=64.000
nMotionVectorsY=45.120
mv_dx=0.000
mv_dy=0.000
mv_l=4.500
mv_r=0.900
mv_g=1.000
mv_b=0.300
mv_a=0.110
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.10000
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.100
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.100
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=// clear buffer
per_frame_init_2=i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1);
per_frame_init_3=
per_frame_init_4=count = 50;
per_frame_init_5=attributes = 16;
per_frame_init_6=
per_frame_init_7=minradius = 0.005;
per_frame_init_8=maxradius = 0.045;
per_frame_init_9=v = 0.005;
per_frame_init_10=
per_frame_init_11=// randomize initial coordinates
per_frame_init_12=index = 0;
per_frame_init_13=loop(count, 
per_frame_init_14=     gmegabuf(index*attributes) = rand(1000)/1000;
per_frame_init_15=     gmegabuf(index*attributes+1) = rand(1000)/1000;
per_frame_init_16=     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);
per_frame_init_17=     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);
per_frame_init_18=     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;
per_frame_init_19=     gmegabuf(index*attributes+5) = rand(1000)/1000;
per_frame_init_20=     gmegabuf(index*attributes+6) = rand(1000)/1000;
per_frame_init_21=     gmegabuf(index*attributes+7) = rand(1000)/1000;
per_frame_init_22=     gmegabuf(index*attributes+8) = sqr(gmegabuf(index*attributes+4)) ;
per_frame_init_23=     index = index+1;
per_frame_init_24=    );
per_frame_init_25=
per_frame_init_26=q31 = count;
per_frame_init_27=q32 = attributes;
per_frame_init_28=
per_frame_init_29=// 0, x
per_frame_init_30=// 1, y
per_frame_init_31=// 2, vx
per_frame_init_32=// 3, vy
per_frame_init_33=// 4, radius
per_frame_init_34=// 5, red
per_frame_init_35=// 6, green
per_frame_init_36=// 7, blue
per_frame_init_37=// 8, mass
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=q4=sin(atime*.03);
per_frame_25=q5=cos(atime*.030383824);
per_frame_26=q6=tan(atime*.029384834);
per_frame_27=wave_r = wave_r + 0.4*sin(time*3.14) + (0.2*mid);
per_frame_28=wave_b = wave_b + 0.2*sin(time*1.5);
per_frame_29=wave_g = wave_g + 0.2*mid;
per_frame_30=cx = cx + 0.1*sin(time);
per_frame_31=
per_frame_32=
per_frame_33=
per_frame_34=
per_frame_35=warp = 0;
per_frame_36=zoom = 1;
per_frame_37=
per_frame_38=gravity = 0.005/fps*0;
per_frame_39=dampening = 1;
per_frame_40=pi2 = asin(1);
per_frame_41=
per_frame_42=
per_frame_43=nn = 3; // number of nearest neighbors to search, reduce if not needed!
per_frame_44=        // collision detection is based on nearest neighbors now, so keep it at least at 1.
per_frame_45=
per_frame_46=check = 2; // how many neighbors will be checked for a possible collision. may not be above nn.
per_frame_47=           // raise to avoid odd behavior in clusters of touching balls.
per_frame_48=
per_frame_49=index = 0; index2 = 0;  w = (aspecty-aspectx)/2;
per_frame_50=loop(count, 
per_frame_51=     // simple physics: adding velocity vectors, applying gravity + bouncing off borders
per_frame_52=     gmegabuf(index*attributes+1) = gmegabuf(index*attributes+1) + gmegabuf(index*attributes+3);
per_frame_53=     gmegabuf(index*attributes) = gmegabuf(index*attributes) + gmegabuf(index*attributes+2);
per_frame_54=     gmegabuf(index*attributes+2) = if( below( gmegabuf(index*attributes), 0-w+gmegabuf(index*attributes+4)),
per_frame_55=                                        abs(gmegabuf(index*attributes+2))*dampening,
per_frame_56=                                        gmegabuf(index*attributes+2) ); 
per_frame_57=     gmegabuf(index*attributes+2) = if( above( gmegabuf(index*attributes), 1+w-gmegabuf(index*attributes+4)),
per_frame_58=                                        -abs(gmegabuf(index*attributes+2))*dampening,
per_frame_59=                                        gmegabuf(index*attributes+2) ); 
per_frame_60=     gmegabuf(index*attributes+3) = gmegabuf(index*attributes+3) - gravity;
per_frame_61=     gmegabuf(index*attributes+3) = if( below( gmegabuf(index*attributes+1), gmegabuf(index*attributes+4)),
per_frame_62=                                        abs(gmegabuf(index*attributes+3))*dampening,
per_frame_63=                                        gmegabuf(index*attributes+3); );
per_frame_64=     gmegabuf(index*attributes+3) = if( above( gmegabuf(index*attributes+1), 1-gmegabuf(index*attributes+4)),
per_frame_65=                                        -abs(gmegabuf(index*attributes+3))*dampening,
per_frame_66=                                        gmegabuf(index*attributes+3); );
per_frame_67=     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer
per_frame_68=     loop( count,
per_frame_69=           d = sqrt( sqr(gmegabuf(index*attributes)-gmegabuf(i*attributes)) + sqr(gmegabuf(index*attributes+1)-gmegabuf(i*attributes+1)));
per_frame_70=           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)
per_frame_71=           d = d - (gmegabuf(index*attributes+4)+gmegabuf(i*attributes+4))*0.5; // subtract radius (surface to surface distance)
per_frame_72=           megabuf(j)   = i; // store index/distance pairs
per_frame_73=           megabuf(j+1) = d; 
per_frame_74=           j = j+2;
per_frame_75=           i = i+1; );
per_frame_76=     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors
per_frame_77=     loop( nn,
per_frame_78=           j = i; smallestfind = 10; findindex = -1;
per_frame_79=           loop( count-j,
per_frame_80=                 distance =megabuf(j*2+1);
per_frame_81=                 smaller = above( smallestfind, distance);
per_frame_82=                 smallestfind = if(smaller, distance, smallestfind);
per_frame_83=                 findindex = if( smaller, j*2, findindex);
per_frame_84=                 j = j + 1; );
per_frame_85=           j = megabuf(i*2); d = megabuf(i*2+1);
per_frame_86=           megabuf(i*2)   = megabuf(findindex);
per_frame_87=           megabuf(i*2+1) = megabuf(findindex+1);
per_frame_88=           megabuf(findindex)   = j;
per_frame_89=           megabuf(findindex+1) = d;
per_frame_90=           i = i+1;
per_frame_91=         );
per_frame_92=     i = 0; // storing the indexes of the nearest neighbors in the attributes beginning from 10
per_frame_93=     loop( nn,
per_frame_94=           gmegabuf(index*attributes + 10 + i) = megabuf(i*2);
per_frame_95=           i = i +1;
per_frame_96=         );
per_frame_97=     i = 0; // collision detection and impulse transmission below
per_frame_98=     loop( check,
per_frame_99=           index2 = megabuf(i);
per_frame_100=           hit = below( sqrt( sqr( gmegabuf(index*attributes) - gmegabuf(index2*attributes)) +
per_frame_101=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_102=                        gmegabuf(index*attributes + 4) + gmegabuf(index2*attributes + 4)
per_frame_103=                      )
per_frame_104=                 *
per_frame_105=                 above( sqrt( sqr( gmegabuf(index*attributes)   - gmegabuf(index2*attributes))+
per_frame_106=                        sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_107=                        sqrt( sqr( gmegabuf(index*attributes+0) - gmegabuf(index2*attributes+0)+ 
per_frame_108=                                   gmegabuf(index*attributes+2) - gmegabuf(index2*attributes+2))+
per_frame_109=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1)+
per_frame_110=                                   gmegabuf(index*attributes+3) - gmegabuf(index2*attributes+3)) ) );
per_frame_111=           ref_ang = atan2( gmegabuf(index2*attributes)-gmegabuf(index*attributes), // calculating the angle of the common tangent
per_frame_112=                            gmegabuf(index2*attributes + 1)-gmegabuf(index*attributes + 1)) + pi2;
per_frame_113=           v1 = sqrt(sqr( gmegabuf(index*attributes + 2)) + sqr( gmegabuf(index*attributes + 3))); // velocity of object1
per_frame_114=           v2 = sqrt(sqr( gmegabuf(index2*attributes + 2)) + sqr( gmegabuf(index2*attributes + 3)));  // velocity of object2
per_frame_115=           w1 = atan2( gmegabuf(index*attributes + 2), gmegabuf(index*attributes + 3));   // object1 motion angle
per_frame_116=           w2 = atan2( gmegabuf(index2*attributes + 2), gmegabuf(index2*attributes + 3)); // object2 motion angle
per_frame_117=           m1 = gmegabuf(index*attributes + 8); m2 = gmegabuf(index2*attributes + 8);
per_frame_118=           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);
per_frame_119=           gmegabuf( index*attributes + 2) = if( hit,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_120=                                                  gmegabuf( index*attributes + 2) );
per_frame_121=           gmegabuf( index*attributes + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_122=                                                 gmegabuf( index*attributes + 3) );
per_frame_123=           gmegabuf( index2*attributes + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_124=                                                  gmegabuf( index2*attributes + 2) );
per_frame_125=           gmegabuf( index2*attributes + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_126=                                                  gmegabuf( index2*attributes + 3) );
per_frame_127=           i=i+2;
per_frame_128=         );
per_frame_129=     index = index+1;
per_frame_130=    );
per_frame_131=q1 = aspectx;
per_frame_132=q2 = aspecty;
warp_1=`sampler sampler_pw_noise_lq;
warp_2=`sampler sampler_shub1;
warp_3=`shader_body {
warp_4=`float corr = texsize.xy*texsize_noise_lq.zw;
warp_5=`float2 uv1 = float2(uv.x-0.5,uv.y-0.5)*aspect.xy;
warp_6=`
warp_7=`//uv = float2(uv.x,uv.y)*aspect.xy;
warp_8=`
warp_9=`int2 k1 = (texsize.xy*uv)%2;
warp_10=`
warp_11=`double3 ist = GetBlur1(uv);
warp_12=`
warp_13=`double3 crisp = tex2D(sampler_main,uv);
warp_14=`crisp = crisp + (.03) -.00*pow(rad,2);
warp_15=`
warp_16=`float3 ret1 = crisp;
warp_17=`
warp_18=`float3 dec = float3(.98,0.98,0.975);
warp_19=`
warp_20=`ret1 = ret1 * (1-.0*ist)*(1-.08*abs(tan(4*ist*1.58)));
warp_21=`ret = ret1;
warp_22=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_23=`                      ((uv.xyy*q27
warp_24=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_25=`                      ).xyz*
warp_26=`                      float3(1,1,0)*0.05 + 
warp_27=`                      time*float3(0,0,1)*q29
warp_28=`                     );
warp_29=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; 
warp_30=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; 
warp_31=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; 
warp_32=`ret = ret -.01;
warp_33=`}
comp_1=`sampler sampler_fc_sunrise;
comp_2=`float2 factorA, factorB, product;
comp_3=`float2 numerator, denominator, fraction;
comp_4=`shader_body
comp_5=`{
comp_6=`float2 uvo = uv;
comp_7=`uv = (uv-0.5);
comp_8=`factorA = uv+ float2(q1,q2);
comp_9=`factorB = float2(8,0);
comp_10=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_11=`float2 uv1 = product;
comp_12=`factorA = uv+ float2(q3,q4);
comp_13=`factorB = float2(8,0);
comp_14=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_15=`float2 uv2 = product;
comp_16=`factorA = uv+ float2(q5,q6);
comp_17=`factorB = float2(8,0);
comp_18=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_19=`float2 uv3 = product;
comp_20=`factorA = uv+ float2(q7,q8);
comp_21=`factorB = float2(8,0);
comp_22=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_23=`float2 uv4 = product;
comp_24=`factorA = uv1;
comp_25=`factorB = uv2;
comp_26=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_27=`float2 uv12 = product;
comp_28=`factorA = uv3;
comp_29=`factorB = uv4;
comp_30=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_31=`float2 uv34 = product;
comp_32=`factorA = uv12;
comp_33=`factorB = uv34;
comp_34=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_35=`numerator = float2(1,0);
comp_36=`denominator = product;
comp_37=`fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_38=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_39=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_40=`uv = fraction*(16);
comp_41=`uv = lerp(0.5 + (uvo-0.5)*(2+(bass_att-treb_att)*0.02),uv+0.5,0.5);
comp_42=`
comp_43=`float l = length(uv-0.5);
comp_44=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5); // Eo.S. mirror code with cutted borders
comp_45=`
comp_46=`ret = GetPixel(uv).y*float3(1,0.6,0);
comp_47=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_48=`                      ((uv.xyy*q28
comp_49=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_50=`                      ).xyz*
comp_51=`                      float3(1,1,0)*0.05 + 
comp_52=`                      time*float3(0,0,1)*q31
comp_53=`                     );
comp_54=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_55=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_56=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_57=`ret = lerp(saturate(ret),0,GetBlur2(uv).z*0.5);
comp_58=`ret = lerp(saturate(ret),float3(0.3,0.4,0.5),GetBlur2(uv).x*4);
comp_59=`ret = lerp(saturate(ret),1,GetPixel(uv).z);
comp_60=`ret = lerp(saturate(ret),0,GetPixel(uv).x*0.6);
comp_61=`ret*=saturate(1.6-pow(l,6)*0.004);
comp_62=`}
