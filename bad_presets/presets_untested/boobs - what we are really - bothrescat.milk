MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=2.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.573
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=0.240
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.000
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.00909
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=28.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_init1=t8 = t
wave_0_per_point1=x = .5 + (bass*.42)*sin(sample*2*(time*10)) + 5*sin(time*22);
wave_0_per_point2=y = .5 + (bass*.42)*cos(sample*2*(time*10));
wave_0_per_point3=r = 1 + .5*sin(sample*2+(time*10));
wave_0_per_point4=g = 1 + .5*sin(sample*2+(time*50));
wave_0_per_point5=b = 1 + .5*sin(sample*2+(time*20));
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_init1=//pi
wave_3_init2=//t8=3.14159265*0.15;
wave_3_init3=//t5 = 1;
wave_3_init4=
wave_3_init5=//n =300;
wave_3_init6=t1 = 300;
wave_3_init7=//rx = 0;
wave_3_init8=t2 = 10;
wave_3_init9=//ry = 0;
wave_3_init10=t3 = 0;
wave_3_init11=//tpi =3.1415;
wave_3_init12=t4 = 2.14159265;
wave_3_init13=//c=1;
wave_3_init14=t5 = 1;
wave_3_init15=//hu=10;
wave_3_init16=t6 = 10;
wave_3_init17=//hut=-10;
wave_3_init18=t7 = -10;
wave_3_per_frame1=t7 = 0.5+0.5*sin(time*0.01)*t4;
wave_3_per_frame2=t6 = (t7+t6*5)/6;
wave_3_per_frame3=t2 = pow(2*bass+bass_att,5)*0.01115111 +oldt2;
wave_3_per_frame4=oldt2 = t2;
wave_3_per_frame5=//t2 = 3*sin(time*0.01*1.1965);
wave_3_per_frame6=t3 = pow(2*bass+bass_att,4)*0.01126213 + oldt3;
wave_3_per_frame7=oldt3 = t3;
wave_3_per_frame8=//t3 =  3*sin(time*0.01*0.0872);
wave_3_per_frame9=
wave_3_per_frame10=q1 = -cos(cos(t2));
wave_3_per_frame11=q2 = cos(-t3);
wave_3_per_frame12=q3 = sin(cos(-t2));
wave_3_per_frame13=q4 = sin(t3);
wave_3_per_point1=u = sample*1-1;
wave_3_per_point2=rf = 512;
wave_3_per_point3=shc = 1-u*u;
wave_3_per_point4=cf = below(sample,1.05);
wave_3_per_point5=u=if(cf,sqrt(shc)*(-u/2+0.5), if(below(sample,0.05), (sample-0.05)*15+0.1, pow(shc,0.7)*1.5));
wave_3_per_point6=u = u + v/2;
wave_3_per_point7=px = cos(sample*t4*rf)*u/2+cos(t6)+1.5;
wave_3_per_point8=py = sample*2-1;
wave_3_per_point9=pz = sin(sample*t4*rf)*u/2+2.9;
wave_3_per_point10=y1 = py*q1 + pz*q3;
wave_3_per_point11=z1 = pz*q1 - py*q3;
wave_3_per_point12=x2 = px*q2 + z1*q4;
wave_3_per_point13=z2 = z1*q2 - px*q4+5;
wave_3_per_point14=x = x2/z2;
wave_3_per_point15=y = y1/z2;
wave_3_per_point16=x = x*0.5 + 0.5;
wave_3_per_point17=y = 0.5*(2*y-1) + 0.5;
wave_3_per_point18=r = 0.5+sin(sample*295)*0.5;
wave_3_per_point19=g = 0.5*sin(time*0.01*0.0245)+0.999*(0.5+sin((2*x-1)*195)*0.5);
wave_3_per_point20=b = 0.5*sin(time*0.01*0.1876)+0.495*(0.5+sin((2*y-1)*208)*0.5);
shapecode_0_enabled=0
shapecode_0_sides=32
shapecode_0_additive=0
shapecode_0_thickOutline=1
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.04999
shapecode_0_ang=0.01000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=0.900
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.900
shapecode_0_border_r=0.460
shapecode_0_border_g=0.370
shapecode_0_border_b=0.600
shapecode_0_border_a=0.900
shape_0_per_frame1=x = 0.5 + 0.07*cos(q3*0.5) + 0.31*cos(time*0.09);
shape_0_per_frame2=y = 0.5 + 0.07*sin(q3*0.5) + 0.31*sqr(sin(time*1));
shape_0_per_frame3=r = 0.5 + 0.5*sin(time*713 + 2);
shape_0_per_frame4=g = 0.5 + 0.5*cos(time*863 + 3);
shape_0_per_frame5=b = 0.5 + 0.5*sin(time*354 + 1);
shape_0_per_frame6=r2 = 0.5 + 0.5*cos(time*185 + 3);
shape_0_per_frame7=g2 = 0.5 + 0.5*sin(time*556+ 2);
shape_0_per_frame8=b2 = 0.5 + 0.5*sin(time*0.01*0.838 + 4);
shape_0_per_frame9=border_red = sin(time*0.01*0.874);
shape_0_per_frame10=border_green = sin(time*0.01*0.834);
shape_0_per_frame11=border_blue = sin(time*0.01*0.734);
shapecode_1_enabled=1
shapecode_1_sides=5
shapecode_1_additive=0
shapecode_1_thickOutline=1
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.05033
shapecode_1_ang=0.03000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.210
shapecode_1_g=0.440
shapecode_1_b=0.230
shapecode_1_a=0.900
shapecode_1_r2=0.180
shapecode_1_g2=1.000
shapecode_1_b2=0.110
shapecode_1_a2=0.900
shapecode_1_border_r=0.150
shapecode_1_border_g=0.400
shapecode_1_border_b=0.480
shapecode_1_border_a=0.900
shape_1_per_frame1=ang = time*0.01*2.4;
shape_1_per_frame2=//x = 0.5 + 0.26*cos(time*0.01*3.1) + 0.13*cos(time*0.01*1.7);
shape_1_per_frame3=//y = 0.5 + 0.22*sin(time*0.01*3.3) + 0.14*sin(time*0.01*1.2);
shape_1_per_frame4=r = 0.5 + 0.5*sin(time*0.31*0.713 + 1);
shape_1_per_frame5=g = 0.5 + 0.5*sin(time*0.31*0.563 + 2);
shape_1_per_frame6=b = 0.5 + 0.5*cos(time*0.21*0.654 + 5);
shape_1_per_frame7=r2 = 0.15 + 0.5*cos(time*0.21*0.885 + 4);
shape_1_per_frame8=g2 = 0.5 + 0.5*sin(time*0.31*0.556+ 1);
shape_1_per_frame9=b2 = 0.5 + 0.5*sin(time*0.251*0.638 + 3);
shape_1_per_frame10=border_red = sin(time*0.21*0.644);
shape_1_per_frame11=border_green = cos(time*0.301*0.874);
shape_1_per_frame12=border_blue = sin(time*0.201*0.954);
shapecode_2_enabled=0
shapecode_2_sides=32
shapecode_2_additive=0
shapecode_2_thickOutline=1
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.05033
shapecode_2_ang=0.03000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=0.210
shapecode_2_g=0.440
shapecode_2_b=0.230
shapecode_2_a=0.900
shapecode_2_r2=0.180
shapecode_2_g2=1.000
shapecode_2_b2=0.110
shapecode_2_a2=0.900
shapecode_2_border_r=0.150
shapecode_2_border_g=0.400
shapecode_2_border_b=0.480
shapecode_2_border_a=0.900
shape_2_per_frame1=ang = time*0.01*2.4;
shape_2_per_frame2=x = 0.5 + 0.22*cos(time*0.01*3.3) + 0.14*cos(time*0.01*1.2);
shape_2_per_frame3=y = 0.5 + 0.26*sin(time*0.01*3.1) + 0.13*sin(time*0.01*1.7);
shape_2_per_frame4=r = 0.5 + 0.5*sin(time*0.01*1.013 + 5);
shape_2_per_frame5=g = 0.5 + 0.5*cos(time*0.01*1.063 + 2);
shape_2_per_frame6=b = 0.5 + 0.5*sin(time*0.01*1.054 + 1);
shape_2_per_frame7=r2 = 0.5 + 0.5*sin(time*0.01*1.085 + 3);
shape_2_per_frame8=g2 = 0.5 + 0.5*cos(time*0.01*1.056+ 1);
shape_2_per_frame9=b2 = 0.5 + 0.5*sin(time*0.01*1.038 + 4);
shape_2_per_frame10=border_red = sin(time*0.01*0.574);
shape_2_per_frame11=border_green = sin(time*0.01*0.774);
shape_2_per_frame12=border_blue = cos(time*0.01*1.054);
shapecode_3_enabled=0
shapecode_3_sides=32
shapecode_3_additive=0
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.510
shapecode_3_y=0.490
shapecode_3_rad=0.05026
shapecode_3_ang=0.06283
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=0.900
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.900
shapecode_3_border_r=0.460
shapecode_3_border_g=0.280
shapecode_3_border_b=0.540
shapecode_3_border_a=0.900
shape_3_per_frame1=x = 0.5 + 0.07*cos(q3*0.5) + 0.31*sin(time*0.01*3.7);
shape_3_per_frame2=y = 0.5 + 0.07*sin(q3*0.5) + 0.31*cos(time*0.01*3.7);
shape_3_per_frame3=r = 0.5 + 0.5*sin(time*0.01*1.013 + 2);
shape_3_per_frame4=g = 0.5 + 0.5*cos(time*0.01*0.863 + 3);
shape_3_per_frame5=b = 0.5 + 0.5*sin(time*0.01*1.054 + 1);
shape_3_per_frame6=r2 = 0.5 + 0.5*cos(time*0.01*1.185 + 3);
shape_3_per_frame7=g2 = 0.5 + 0.5*sin(time*0.01*1.356+ 2);
shape_3_per_frame8=b2 = 0.5 + 0.5*sin(time*0.01*0.738 + 4);
shape_3_per_frame9=border_red = sin(time*0.01*1.074);
shape_3_per_frame10=border_green = sin(time*0.01*0.834);
shape_3_per_frame11=border_blue = sin(time*0.01*0.934);
per_frame_init_1=x1 = 2;
per_frame_init_2=y1= 2;
per_frame_init_3=z1 = 2;
per_frame_1=//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing
per_frame_2=vb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;
per_frame_3=vvb = vvb*0.95 + (1-vvb)*vb*0.01;
per_frame_4=vm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;
per_frame_5=vvm = vvm*0.95 + (1-vvm)*vm*0.01;
per_frame_6=vt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;
per_frame_7=vvt = vvt*0.95 + (1-vvt)*vt*0.01;
per_frame_8=vvb = min(1,max(0,vvb));
per_frame_9=vvm = min(1,max(0,vvm));
per_frame_10=vvt = min(1,max(0,vvt));
per_frame_11=q1   = (vvb+vvm+vvt)*10;
per_frame_12=q2   = (vvb+vvm+vvt)*10;
per_frame_13=q3   = (vvb+vvm+vvt)*10;
per_frame_14=q4   = (vvb+vvm+vvt)*10;
per_frame_15=q5   = (vvb+vvm+vvt)*10;
per_frame_16=q6   = (vvb+vvm+vvt)*10;
per_frame_17=q7   = (vvb+vvm+vvt)*10;
per_frame_18=q8   = (vvb+vvm+vvt)*10;
per_frame_19=q9   = (vvb+vvm+vvt)*10;
per_frame_20=q10  = (vvb+vvm+vvt)*10;
per_frame_21=q11  = (vvb+vvm+vvt)*10;
per_frame_22=q12  = (vvb+vvm+vvt)*10;
per_frame_23=q13  = (vvb+vvm+vvt)*10;
per_frame_24=q14  = (vvb+vvm+vvt)*10;
per_frame_25=q15  = (vvb+vvm+vvt)*10;
per_frame_26=q16  = (vvb+vvm+vvt)*10;
per_frame_27=q17  = (vvb+vvm+vvt)*10;
per_frame_28=q18  = (vvb+vvm+vvt)*10;
per_frame_29=q19  = (vvb+vvm+vvt)*10;
per_frame_30=q20  = (vvb+vvm+vvt)*10;
per_frame_31=q21  = (vvb+vvm+vvt)*10;
per_frame_32=q22  = (vvb+vvm+vvt)*10;
per_frame_33=q23  = (vvb+vvm+vvt)*10;
per_frame_34=q24  = (vvb+vvm+vvt)*10;
per_frame_35=q25  = (vvb+vvm+vvt)*10;
per_frame_36=q26  = (vvb+vvm+vvt)*10;
per_frame_37=q27  = (vvb+vvm+vvt)*10;
per_frame_38=q28  = (vvb+vvm+vvt)*10;
per_frame_39=q29  = (vvb+vvm+vvt)*10;
per_frame_40=q30  = (vvb+vvm+vvt)*10;
per_frame_41=q31  = (vvb+vvm+vvt)*10;
per_frame_42=q32  = (vvb+vvm+vvt)*10;
per_frame_43=
per_frame_44=q1 = aspectx;
per_frame_45=q2 = aspecty;
per_frame_46=wave_a = 0;
per_frame_47=v = 0.5;
per_frame_48=j1 = j1*0.95 + sqr(bass*4)*v;
per_frame_49=j2 = j2*0.95 + sqr(mid*4)*v;
per_frame_50=j3 = j3*0.95 + sqr(treb*4)*v;
per_frame_51=
per_frame_52=n = n + j1*0.0052;
per_frame_53=n1 = n1 + j2*0.0052;
per_frame_54=n2 = n2 + j3*0.0052;
per_frame_55=
per_frame_56=
per_frame_57=q3 = n*0.01; // passing the 3 room angles
per_frame_58=q4 = n1*0.01;
per_frame_59=q5 = n2*0.01;
per_frame_60=
per_frame_61=
per_frame_62=// lorenz-attractor calc
per_frame_63=a = 10;
per_frame_64=b = 28;
per_frame_65=c = 8/3;
per_frame_66=dx1 = a*(y1-x1);
per_frame_67=dy1 = x1*(b-z1)-y1;
per_frame_68=dz1 = x1*y1-c*z1;
per_frame_69=d = 1;
per_frame_70=dd = sqrt(dx1*dx1 + dy1*dy1 + dz1*dz1);
per_frame_71=x1 = x1 + d*dx1/dd;
per_frame_72=y1 = y1 + d*dy1/dd;
per_frame_73=z1 = z1 + d*dz1/dd;
per_frame_74=
per_frame_75=q11 = x1;
per_frame_76=q12 = y1;
per_frame_77=q13 = z1;
per_frame_78=q14 = a;
per_frame_79=q15 = b;
per_frame_80=q16 = c;
per_frame_81=q17 = d;
per_pixel_1=cx1 = 0.5+sin(time*0.618)*0.2;
per_pixel_2=cy1 = 0.5+cos(time*1.618)*0.2;
per_pixel_3=
per_pixel_4=dir = bass;
per_pixel_5=
per_pixel_6=d = sqrt((x-cx1)*(x-cx1)+(y-cy1)*(y-cy1));
per_pixel_7=
per_pixel_8=x1 = if( above(d,0.3),0,  sin(y-cy1)*0.05*dir);
per_pixel_9=y1 = if( above(d,0.3),0, -sin(x-cx1)*0.05*dir);
per_pixel_10=
per_pixel_11=
per_pixel_12=cx1 = 0.5+sin(time*2.618)*0.3;
per_pixel_13=cy1 = 0.5+cos(time*3.14)*0.3;
per_pixel_14=
per_pixel_15=dir = -mid*2;
per_pixel_16=
per_pixel_17=d = sqrt((x-cx1)*(x-cx1)+(y-cy1)*(y-cy1));
per_pixel_18=
per_pixel_19=x2 = if( above(d,0.2),0,  sin(y-cy1)*0.05*dir);
per_pixel_20=y2 = if( above(d,0.2),0, -sin(x-cx1)*0.05*dir);
per_pixel_21=
per_pixel_22=cx1 = 0.5+sin(-time*2.618)*0.4;
per_pixel_23=cy1 = 0.5+cos(-time*1.14)*0.4;
per_pixel_24=
per_pixel_25=dir = treb*3;
per_pixel_26=
per_pixel_27=d = sqrt((x-cx1)*(x-cx1)+(y-cy1)*(y-cy1));
per_pixel_28=
per_pixel_29=x3 = if( above(d,0.1),0,  sin(y-cy1)*0.05*dir);
per_pixel_30=y3 = if( above(d,0.1),0, -sin(x-cx1)*0.05*dir);
per_pixel_31=
per_pixel_32=
per_pixel_33=dx = dx+x1+x2+x3;
per_pixel_34=dy = dy+y1+y2+y3;
warp_1=`shader_body
warp_2=`{
warp_3=`    
warp_4=`    float2x2 rot =  {  q5, q4,
warp_5=`                       -q4, q5 };
warp_6=`
warp_7=`    float3 txr = float3(uv,q2);
warp_8=`
warp_9=`    float final_noise = 0;
warp_10=`    final_noise += (1.0/pow(2,0))*(tex3D(sampler_noisevol_hq, txr*pow(q3,0))*2-1);
warp_11=`    final_noise += (1.0/pow(2,1))*(tex3D(sampler_noisevol_hq, txr*pow(q3,1))*2-1);
warp_12=`    final_noise += (1.0/pow(2,2))*(tex3D(sampler_noisevol_hq, txr*pow(q3,2))*2-1);
warp_13=`    final_noise += (1.0/pow(2,3))*(tex3D(sampler_noisevol_hq, txr*pow(q3,3))*2-1);
warp_14=`
warp_15=`    final_noise =  pow(final_noise,1);
warp_16=`    
warp_17=`    ret = tex2D(sampler_main, mul(uv-0.5,rot)*(1-rad*3.7*(1 - bass_att*0.3))*final_noise + 0.5).xyz; 
warp_18=`   
warp_19=`    // darken (decay) over time
warp_20=`    ret = ret - 0.08; //or try: ret -= 0.004;
warp_21=`}
comp_1=`sampler sampler_pw_noise_lq;
comp_2=`
comp_3=`float2 rs, rss, rss0, tmp, uvo;
comp_4=`float3 noise;
comp_5=`
comp_6=`float2 complex_div(float2 numerator, float2 denominator){
comp_7=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
comp_8=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
comp_9=`          (denominator.x*denominator.x + denominator.y*denominator.y);
comp_10=`}
comp_11=`
comp_12=`float2 uv_polar(float2 domain, float2 center){
comp_13=`   float2 c = domain - center;
comp_14=`   float rad_hq = length(c);
comp_15=`   float ang_hq = atan2(c.x,c.y);
comp_16=`   return float2(ang_hq, rad_hq);
comp_17=`}
comp_18=`
comp_19=`float2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){
comp_20=`   float2 polar = uv_polar(domain, center);
comp_21=`   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);
comp_22=`}
comp_23=`
comp_24=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
comp_25=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
comp_26=`}
comp_27=`
comp_28=`float2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
comp_29=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
comp_30=`   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord)*float2(M_INV_PI_2,1);
comp_31=`}
comp_32=`
comp_33=`float2 uv_scale(float2 domain, float2 center, float2 scale){
comp_34=`   return center + (domain-center)*scale;
comp_35=`}
comp_36=`float2 uv_lens_half_sphere(float2 domain, float2 position, float radius, float refractivity){
comp_37=`   float2 polar = uv_polar(domain, position);
comp_38=`   float cone = saturate(1-polar.y/radius);
comp_39=`   float halfsphere = sqrt(1-pow(cone-1,2));
comp_40=`   float w = atan2(1-cone,halfsphere);
comp_41=`   float refrac_w = w-asin(sin(w)/refractivity);
comp_42=`   float refrac_d = 1-cone - sin(refrac_w)*halfsphere/cos(refrac_w);
comp_43=`   float2 refrac_uv =position+float2(sin(polar.x),cos(polar.x))*refrac_d*radius;
comp_44=`   bool mask =(length(domain-position)<radius);
comp_45=`   return !mask*domain + 
comp_46=`           mask*refrac_uv;
comp_47=`}
comp_48=`
comp_49=`/* code from Martins hardcore mix - Danke ;) */
comp_50=`float hardcore_stars(float2 domain, float2 center, float o){
comp_51=`
comp_52=`   float2 uv1 = domain-center;
comp_53=`   rss0.x = atan2(uv1.x, uv1.y)/3.1416;
comp_54=`   rss0.y = .003/(length (uv1));
comp_55=`   rss = float2 (rss0.x+q1/3,rss0.y+time+o);
comp_56=`   rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_57=`   float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);
comp_58=`   tmp = abs(frac(rss*8)-.5);
comp_59=`   float3 dots = saturate(.04/length(tmp)) *noise;
comp_60=`   rss = float2 (rss0.x,rss0.y+(time+o)/4);
comp_61=`   rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_62=`   noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);
comp_63=`   tmp = abs(frac(rss*8)-.5);
comp_64=`   dots += saturate(.02/length(tmp)) * noise;
comp_65=`   dots *= saturate(.2/abs(rss0.y));
comp_66=`   return dots*dots;
comp_67=`return 0;
comp_68=`}
comp_69=`
comp_70=`
comp_71=`
comp_72=`
comp_73=`
comp_74=`
comp_75=`shader_body
comp_76=`{
comp_77=`uv = 0.5 + (uv-0.5)*aspect.wz;
comp_78=`time *= 0.4;
comp_79=`
comp_80=`float2 pole1 =float2(0.1,0.5);
comp_81=`float2 pole2 =float2(0.9,0.5);
comp_82=`
comp_83=`float stars = hardcore_stars(uv,pole1,0) + hardcore_stars(uv,pole2,2);
comp_84=`
comp_85=`uv = uv_bipolar_logarithmic(uv, pole1, pole2, 2, 0.3, float2(q26,q27)*float2(8,1));
comp_86=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders
comp_87=`uv = uv.yx;
comp_88=`
comp_89=`float2 uv1 = uv;
comp_90=`float2 d = texsize.zw*3;
comp_91=`float3 dx = GetBlur1(uv1 + float2(1,0)*d) - GetBlur1(uv1 - float2(1,0)*d);
comp_92=`float3 dy = GetBlur1(uv1 + float2(0,1)*d) - GetBlur1(uv1 - float2(0,1)*d);
comp_93=`uv1 = uv+float2(dx.x,dy.x)*texsize.zw*32;
comp_94=`     ret = GetPixel(uv1).x*float3(1,0,0)*0.5;
comp_95=`
comp_96=`ret.x += (+dx.x - dy.x)*0.4;
comp_97=`ret.x = pow(ret.x,0.8)*1.2;
comp_98=`
comp_99=`ret = lerp(ret,float3(1,1,1),GetPixel(uv1).z);
comp_100=`
comp_101=`ret = lerp(ret,1-GetPixel(uv)*1.5,stars);
comp_102=`}
comp_103=`
comp_104=`
