MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.000
fDecay=0.996
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=2
bAdditiveWaves=0
bWaveDots=1
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=1
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.012
fWaveSmoothing=0.900
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=1.000
fWarpScale=1.000
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.500
wave_g=0.400
wave_b=0.300
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.010
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.600
mv_dy=0.000
mv_l=0.050
mv_r=0.000
mv_g=0.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=0.000
wavecode_0_b=0.000
wavecode_0_a=1.000
wave_0_per_point1=division = int(sample*4) + 1;
wave_0_per_point2=
wave_0_per_point3=
wave_0_per_point4=wave=(value1*170 + value2*170) * 0.5;
wave_0_per_point5=
wave_0_per_point6=//// first frequency band, full frame 60hz@60fps
wave_0_per_point7=//set to 0 at beginning of frame
wave_0_per_point8=band1max = if( equal(sample,0) , -1, band1max);
wave_0_per_point9=band1min = if( equal(sample,0) , 1 , band1min);
wave_0_per_point10=
wave_0_per_point11=//accumulate values
wave_0_per_point12=band1max = max(wave,band1max);
wave_0_per_point13=band1min = min(wave,band1min);
wave_0_per_point14=
wave_0_per_point15=//center max and min around 0 and return max value [range 0-1]
wave_0_per_point16=band1 = if( equal(sample,1) , band1max - ((band1min+band1max)*0.5) , band1 );
wave_0_per_point17=t1 = band1;
wave_0_per_point18=
wave_0_per_point19=//// 3rd frequency band
wave_0_per_point20=//divide wave form over frame into subsections
wave_0_per_point21=segmentlength = 8;
wave_0_per_point22=section = (sample*segmentlength) - int(sample*segmentlength - 0.0001);
wave_0_per_point23=zerotest= (1/(512/segmentlength));
wave_0_per_point24=onetest =1 - zerotest;
wave_0_per_point25=
wave_0_per_point26=//set to 0 at beginning of frame
wave_0_per_point27=band3max = if( below(section,zerotest) , -1 , band3max);
wave_0_per_point28=band3min = if( below(section,zerotest) , 1 , band3min);
wave_0_per_point29=maxhold3 = if( below(sample ,1/512) , 0 , maxhold3 );
wave_0_per_point30=
wave_0_per_point31=//accumulate values
wave_0_per_point32=band3max = max(wave,band3max);
wave_0_per_point33=band3min = min(wave,band3min);
wave_0_per_point34=
wave_0_per_point35=//center max and min around 0 and return max value [range 0-1]
wave_0_per_point36=band3temp = if( above(section,onetest), band3max - ((band3min+band3max)*0.5) , band3temp );
wave_0_per_point37=
wave_0_per_point38=maxhold3 = if( above(section,onetest) , maxhold3 + band3temp , maxhold3 );
wave_0_per_point39=band3 = if( equal(sample,1) , maxhold3/segmentlength , band3 );
wave_0_per_point40=
wave_0_per_point41=//t3 = (band3 - (1/segmentlength)) / (1 - 1/segmentlength);
wave_0_per_point42=t3 = band3;
wave_0_per_point43=
wave_0_per_point44=//// 5th frequency band
wave_0_per_point45=//divide wave form over frame into subsections
wave_0_per_point46=segmentlength = 32;
wave_0_per_point47=section = (sample*segmentlength) - int(sample*segmentlength - 0.00001);
wave_0_per_point48=zerotest= (1/(512/segmentlength));
wave_0_per_point49=onetest =1 - zerotest;
wave_0_per_point50=
wave_0_per_point51=//set to 0 at beginning of frame
wave_0_per_point52=band5max = if( below(section,zerotest) , -1, band5max);
wave_0_per_point53=band5min = if( below(section,zerotest) , 1 , band5min);
wave_0_per_point54=maxhold5 = if( below(sample ,1/512) , 0 , maxhold5 );
wave_0_per_point55=
wave_0_per_point56=//accumulate values
wave_0_per_point57=band5max = max(wave,band5max);
wave_0_per_point58=band5min = min(wave,band5min);
wave_0_per_point59=
wave_0_per_point60=//center max and min around 0 and return max value [range 0-1]
wave_0_per_point61=band5temp = if( above(section,onetest) , band5max - ((band5min+band5max)*0.5) , band5temp );
wave_0_per_point62=
wave_0_per_point63=maxhold5 = if( above(section,onetest) , maxhold5 + band5temp , maxhold5 );
wave_0_per_point64=band5 = if( equal(sample,1) , maxhold5/segmentlength , band5 );
wave_0_per_point65=
wave_0_per_point66=//t5 = (band5 - (1/segmentlength)) / (1 - 1/segmentlength);
wave_0_per_point67=t5 = band5;
wave_0_per_point68=
wave_0_per_point69=//// 7th frequency band
wave_0_per_point70=//divide wave form over frame into subsections
wave_0_per_point71=segmentlength = 128;
wave_0_per_point72=section = (sample*segmentlength) - int(sample*segmentlength - 0.00001);
wave_0_per_point73=zerotest= (1/(512/segmentlength));
wave_0_per_point74=onetest =1 - zerotest;
wave_0_per_point75=
wave_0_per_point76=//set to 0 at beginning of frame
wave_0_per_point77=band7max = if( below(section,zerotest) , -1 , band7max);
wave_0_per_point78=band7min = if( below(section,zerotest) , 1 , band7min);
wave_0_per_point79=maxhold7 = if( below(sample ,1/512) , 0 , maxhold7 );
wave_0_per_point80=
wave_0_per_point81=//accumulate values
wave_0_per_point82=band7max = max(wave,band7max);
wave_0_per_point83=band7min = min(wave,band7min);
wave_0_per_point84=
wave_0_per_point85=//center max and min around 0 and return max value [range 0-1]
wave_0_per_point86=band7temp = if( above(section,onetest) , band7max - ((band7min+band7max)*0.5) , band7temp );
wave_0_per_point87=
wave_0_per_point88=maxhold7 = if( above(section,onetest) , maxhold7 + band7temp , maxhold7 );
wave_0_per_point89=band7 = if( equal(sample,1) , maxhold7/segmentlength , band7 );
wave_0_per_point90=
wave_0_per_point91=//t7 = (band7 - (1/segmentlength)) / (1 - 1/segmentlength);
wave_0_per_point92=t7 = band7;
wave_0_per_point93=
wave_0_per_point94=t1=t1*1.9;
wave_0_per_point95=t2=t2*2.8;
wave_0_per_point96=t3=t3*3.5;
wave_0_per_point97=t4=t4*5;
wave_0_per_point98=t5=t5*7;
wave_0_per_point99=t6=t6*12;
wave_0_per_point100=t7=t7*16;
wave_0_per_point101=t8=t8*29;
wave_0_per_point102=t1=pow(t1,2);
wave_0_per_point103=t2=pow(t2,2);
wave_0_per_point104=t3=pow(t3,2);
wave_0_per_point105=t4=pow(t4,2);
wave_0_per_point106=t5=pow(t5,2);
wave_0_per_point107=t6=pow(t6,2);
wave_0_per_point108=t7=pow(t7,2);
wave_0_per_point109=t8=pow(t8,2);
wave_0_per_point110=
wave_0_per_point111=
wave_0_per_point112=t1=max(t1-t3 , 0);
wave_0_per_point113=t3=max(t3-t5 , 0);
wave_0_per_point114=t5=max(t5-t7 , 0);
wave_0_per_point115=
wave_0_per_point116=q1=t1;q2=t2;q3=t3;q4=t4;q5=t5;q6=t6;q7=t7;q8=t8;
wave_0_per_point117=
wave_0_per_point118=x=sample;
wave_0_per_point119=y=0.001;
wave_0_per_point120=
wave_0_per_point121=
wave_0_per_point122=q1=t1;
wave_0_per_point123=q2=t3;
wave_0_per_point124=q3=t5;
wave_0_per_point125=q4=t7;
wave_0_per_point126=
wave_0_per_point127=r1=if( equal(division,1) , t1 , r1 );
wave_0_per_point128=r1=if( equal(division,2) , t3 , r1 );
wave_0_per_point129=r1=if( equal(division,3) , t5 , r1 );
wave_0_per_point130=r1=if( equal(division,4) , t7 , r1 );
wave_0_per_point131=
wave_0_per_point132=r1=min(r1,1);
wave_0_per_point133=r1=max(r1,0);
wave_0_per_point134=r=sin(sample*3.14 + time + 0.0)*0.5+0.5;
wave_0_per_point135=
wave_0_per_point136=g=sin(sample*3.14 + time + 2.1)*0.5+0.5;
wave_0_per_point137=
wave_0_per_point138=b=sin(sample*3.14 + time + 4.2)*0.5+0.5;
wave_0_per_point139=
wave_0_per_point140=a= ( sin(sample*6.283*4 + 4.74)*0.5+0.5  );
wave_0_per_point141=a=max(a - (1-r1) , 0) / r1;
wave_0_per_point142=a=pow( a*r1 , 1-r1*0.5);
wave_0_per_point143=a=0;
wave_0_per_point144=r=min( r * (1+r1) , 1);
wave_0_per_point145=g=min( g * (1+r1) , 1);
wave_0_per_point146=b=min( b * (1+r1) , 1);
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=0.100
wavecode_1_g=1.000
wavecode_1_b=0.700
wavecode_1_a=1.000
wave_1_per_frame1=t1=sin(q5-q6)*0.5+0.5;
wave_1_per_frame2=t2=sin(q5-q7)*0.5+0.5;
wave_1_per_frame3=t3=sin(q6+q8)*0.5+0.5;
wave_1_per_frame4=
wave_1_per_frame5=t4=sin(q5+q6)*0.5+0.5;
wave_1_per_frame6=t5=sin(q5-q8)*0.5+0.5;
wave_1_per_frame7=t6=sin(q6-q7)*0.5+0.5;
wave_1_per_point1=n=sample*6.283;
wave_1_per_point2=phs=-sample * 0.2;
wave_1_per_point3=tm=(q5+q6*q4*.0001) + phs;
wave_1_per_point4=
wave_1_per_point5=flip=flip+1;
wave_1_per_point6=flip=flip*below(flip,2);
wave_1_per_point7=
wave_1_per_point8=xp=0;
wave_1_per_point9=yp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;
wave_1_per_point10=zp=0;
wave_1_per_point11=
wave_1_per_point12=//wrist movement;
wave_1_per_point13=ang=sin(tm*2)*0.5 +0.5;
wave_1_per_point14=
wave_1_per_point15=xq=xp;
wave_1_per_point16=sinang=sin(ang);cosang=cos(ang);
wave_1_per_point17=yq=yp*sinang + zp*cosang;
wave_1_per_point18=zq=yp*cosang - zp*sinang;
wave_1_per_point19=yq=yp;
wave_1_per_point20=zq=zp;
wave_1_per_point21=
wave_1_per_point22=ang=tm*8;
wave_1_per_point23=sinang=sin(ang);cosang=cos(ang);
wave_1_per_point24=xp=xq*sinang + yq*cosang;
wave_1_per_point25=yp=xq*cosang - yq*sinang;
wave_1_per_point26=zp=zq;
wave_1_per_point27=
wave_1_per_point28=//forearm movement;
wave_1_per_point29=zp=zp-0.3;
wave_1_per_point30=ang=3.14 + sin(tm*2 - 0.5)*1.5;
wave_1_per_point31=sinang=sin(ang);cosang=cos(ang);
wave_1_per_point32=xq=xp;
wave_1_per_point33=yq=yp*sinang + zp*cosang;
wave_1_per_point34=zq=yp*cosang - zp*sinang;
wave_1_per_point35=
wave_1_per_point36=//upper arm twist
wave_1_per_point37=ang=-1.0 + cos(tm*3.1 + 0.5);
wave_1_per_point38=sinang=sin(ang);cosang=cos(ang);
wave_1_per_point39=xp=xq*sinang + yq*cosang;
wave_1_per_point40=yp=xq*cosang - yq*sinang;
wave_1_per_point41=zp=zq;
wave_1_per_point42=
wave_1_per_point43=//upper arm outward;
wave_1_per_point44=zp=zp-0.35;
wave_1_per_point45=ang=cos(tm*2.3)*1.75 - 1.05;
wave_1_per_point46=sinang=sin(ang);cosang=cos(ang);
wave_1_per_point47=xq=xp*sinang + zp*cosang;
wave_1_per_point48=yq=yp;
wave_1_per_point49=zq=xp*cosang - zp*sinang;
wave_1_per_point50=
wave_1_per_point51=//upper arm up down;
wave_1_per_point52=ang=cos(tm)*0.5 - 0.5;
wave_1_per_point53=sinang=sin(ang);cosang=cos(ang);
wave_1_per_point54=xp=xq;
wave_1_per_point55=yp=yq*cosang - zq*sinang;
wave_1_per_point56=zp=yq*sinang + zq*cosang;
wave_1_per_point57=
wave_1_per_point58=//xp=xq;yp=yq;zp=zq;
wave_1_per_point59=
wave_1_per_point60=
wave_1_per_point61=//project into screenspace and draw on screen
wave_1_per_point62=zp=zp+2;
wave_1_per_point63=xs=xp/zp;
wave_1_per_point64=ys=yp/zp;
wave_1_per_point65=
wave_1_per_point66=x=xs+0.5;
wave_1_per_point67=y=ys*1.3+0.5;
wave_1_per_point68=
wave_1_per_point69=
wave_1_per_point70=a=(1-sample);
wave_1_per_point71=
wave_1_per_point72=b=b+pow(1-sample,2)*0.3;
wave_1_per_point73=
wave_1_per_point74=
wave_1_per_point75=
wave_1_per_point76=r1=t1;
wave_1_per_point77=g1=t2;
wave_1_per_point78=b1=t3;
wave_1_per_point79=r2=t4;
wave_1_per_point80=g2=t5;
wave_1_per_point81=b2=t6;
wave_1_per_point82=
wave_1_per_point83=r=r1*flip + r2*(1-flip);
wave_1_per_point84=g=g1*flip + g2*(1-flip);
wave_1_per_point85=b=b1*flip + b2*(1-flip);
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=0.200
wavecode_2_g=1.000
wavecode_2_b=0.600
wavecode_2_a=1.000
wave_2_per_frame1=t1=sin(q6/q5)*0.5+0.5;
wave_2_per_frame2=t2=sin(q6-q7)*0.5+0.5;
wave_2_per_frame3=t3=sin(q5+q8)*0.5+0.5;
wave_2_per_frame4=
wave_2_per_frame5=t4=sin(q7+q6)*0.5+0.5;
wave_2_per_frame6=t5=sin(q5-q6)*0.5+0.5;
wave_2_per_frame7=t6=sin(q8-q5)*0.5+0.5;
wave_2_per_point1=n=sample*6.283;
wave_2_per_point2=phs=-sample * 0.2;
wave_2_per_point3=tm=(q6+q5*q4*.0001) + phs;
wave_2_per_point4=
wave_2_per_point5=flip=flip+1;
wave_2_per_point6=flip=flip*below(flip,2);
wave_2_per_point7=
wave_2_per_point8=xp=0;
wave_2_per_point9=yp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2 +0.1;
wave_2_per_point10=yp=-yp;
wave_2_per_point11=zp=0;
wave_2_per_point12=
wave_2_per_point13=//wrist movement;
wave_2_per_point14=ang=sin(tm*2)*0.5 +0.5;
wave_2_per_point15=
wave_2_per_point16=sinang=sin(ang);cosang=cos(ang);
wave_2_per_point17=xq=xp;
wave_2_per_point18=yq=yp*sinang + zp*cosang;
wave_2_per_point19=zq=yp*cosang - zp*sinang;
wave_2_per_point20=yq=yp;
wave_2_per_point21=zq=zp;
wave_2_per_point22=
wave_2_per_point23=ang=tm*8;
wave_2_per_point24=sinang=sin(ang);cosang=cos(ang);
wave_2_per_point25=xp=xq*sinang + yq*cosang;
wave_2_per_point26=yp=xq*cosang - yq*sinang;
wave_2_per_point27=zp=zq;
wave_2_per_point28=
wave_2_per_point29=//forearm movement;
wave_2_per_point30=zp=zp-0.3;
wave_2_per_point31=ang=3.14 + sin(tm*2 - 0.5)*1.5;
wave_2_per_point32=sinang=sin(ang);cosang=cos(ang);
wave_2_per_point33=xq=xp;
wave_2_per_point34=yq=yp*sinang + zp*cosang;
wave_2_per_point35=zq=yp*cosang - zp*sinang;
wave_2_per_point36=
wave_2_per_point37=//upper arm twist
wave_2_per_point38=ang=-1.0 + cos(tm*3.1 + 0.5);
wave_2_per_point39=sinang=sin(ang);cosang=cos(ang);
wave_2_per_point40=xp=xq*sinang + yq*cosang;
wave_2_per_point41=yp=xq*cosang - yq*sinang;
wave_2_per_point42=zp=zq;
wave_2_per_point43=
wave_2_per_point44=//upper arm outward;
wave_2_per_point45=zp=zp-0.35;
wave_2_per_point46=ang=cos(tm*2.3)*1.75 - 1.05;
wave_2_per_point47=sinang=sin(ang);cosang=cos(ang);
wave_2_per_point48=xq=xp*sinang + zp*cosang;
wave_2_per_point49=yq=yp;
wave_2_per_point50=zq=xp*cosang - zp*sinang;
wave_2_per_point51=
wave_2_per_point52=//upper arm up down;
wave_2_per_point53=ang=cos(tm)*0.5 - 0.5;
wave_2_per_point54=sinang=sin(ang);cosang=cos(ang);
wave_2_per_point55=xp=xq;
wave_2_per_point56=yp=yq*cosang - zq*sinang;
wave_2_per_point57=zp=yq*sinang + zq*cosang;
wave_2_per_point58=
wave_2_per_point59=//xp=xq;yp=yq;zp=zq;
wave_2_per_point60=
wave_2_per_point61=
wave_2_per_point62=//project into screenspace and draw on screen
wave_2_per_point63=zp=zp+2;
wave_2_per_point64=xs=xp/zp;
wave_2_per_point65=ys=yp/zp;
wave_2_per_point66=
wave_2_per_point67=x=xs+0.5;
wave_2_per_point68=y=ys*1.3+0.5;
wave_2_per_point69=
wave_2_per_point70=
wave_2_per_point71=a=(1-sample);
wave_2_per_point72=
wave_2_per_point73=
wave_2_per_point74=b=b+pow(1-sample,2)*0.3;
wave_2_per_point75=
wave_2_per_point76=r1=t1;
wave_2_per_point77=g1=t2;
wave_2_per_point78=b1=t3;
wave_2_per_point79=r2=t4;
wave_2_per_point80=g2=t5;
wave_2_per_point81=b2=t6;
wave_2_per_point82=
wave_2_per_point83=r=r1*flip + r2*(1-flip);
wave_2_per_point84=g=g1*flip + g2*(1-flip);
wave_2_per_point85=b=b1*flip + b2*(1-flip);
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=0.000
wavecode_3_g=0.000
wavecode_3_b=0.500
wavecode_3_a=0.500
wave_3_init1=t1=0
wave_3_per_point1=
wave_3_per_point2=
wave_3_per_point3=wave=(value1*170 + value2*170) * 0.5;
wave_3_per_point4=
wave_3_per_point5=t1 = wave;
wave_3_per_point6=
wave_3_per_point7=
wave_3_per_point8=
wave_3_per_point9=
wave_3_per_point10=
wave_3_per_point11=x=sample;
wave_3_per_point12=y=0.2 + t1 * 0.3;
shapecode_0_enabled=1
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.750
shapecode_0_y=0.500
shapecode_0_rad=0.10000
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=rad=sin((q8-q5)*q4*.01)*.5+.5;
shape_0_per_frame2=x=.1*rad;
shape_0_per_frame3=
shape_0_per_frame4=tex_capture=if(above(rad-lrad,0),1,0);
shape_0_per_frame5=
shape_0_per_frame6=lrad=rad;
shapecode_1_enabled=1
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.750
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=rad=sin((q7-q6)*q4*.01)*.5+.5;
shape_1_per_frame2=x=1-.1*rad;
shape_1_per_frame3=
shape_1_per_frame4=tex_capture=if(above(rad-lrad,0),1,0);
shape_1_per_frame5=
shape_1_per_frame6=lrad=rad;
shapecode_2_enabled=1
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=rad=sin((q5-q8)*q4*.01)*.5+.5;
shape_2_per_frame2=y=.1*rad;
shape_2_per_frame3=
shape_2_per_frame4=tex_capture=if(above(rad-lrad,0),1,0);
shape_2_per_frame5=
shape_2_per_frame6=lrad=rad;
shapecode_3_enabled=1
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=1.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=rad=sin((q6-q7)*q4*.01)*.5+.5;
shape_3_per_frame2=y=1-.1*rad;
shape_3_per_frame3=
shape_3_per_frame4=tex_capture=if(above(rad-lrad,0),1,0);
shape_3_per_frame5=
shape_3_per_frame6=lrad=rad;
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=q4=sin(atime*.03);
per_frame_25=q5=cos(atime*.030383824);
per_frame_26=q6=tan(atime*.029384834);
per_frame_27=warp = 0;
per_frame_28=wave_a = 0;
per_frame_29=
per_frame_30=//Here we define the rotation. The 'angle' is in the range of 0...2*Pi
per_frame_31=//We do this in the per-frame section because sin/cos functions cost a lot of shader operations:
per_frame_32=angle=3.14+3*sin(.02*time);
per_frame_33=q31 = sin(angle);
per_frame_34=q32 = cos(angle);
per_frame_35=
per_frame_36=monitor=angle;
per_frame_37=q30=(bass+treb+mid)*2;
warp_1=`sampler sampler_rand02;
warp_2=`float4  texsize_rand02;    // ...it's smart enough to get it from just this.
warp_3=`shader_body
warp_4=`{
warp_5=`    // sample previous frame
warp_6=`    float3 main = tex2D( sampler_main, uv ).xyz;
warp_7=`    float3 mblur = GetBlur1( uv );
warp_8=`//    main = ( (main-mblur*.5)*1 );
warp_9=`    float zoom = 1+.5*( (q9*uv_orig.y-q8*uv_orig.x)*6+rad*sin(ang+2-q3-q4)*mblur.z*3)*(.01+(q1-q2)*.01);
warp_10=`    float rot = (mblur.y-mblur.x)*(1)*.5;
warp_11=`    float2 zcr = float2(.5,.5);
warp_12=`    float2 cr = float2(.5,.95);
warp_13=`    float2 newuv = uv;
warp_14=`
warp_15=`    ///////////////////rotation////////////////
warp_16=`    newuv = uv - cr*9;
warp_17=`    float s = sin(rot/8);
warp_18=`    float c = cos(rot);
warp_19=`    newuv = float2( (uv.x-cr.x)*c-(uv.y-cr.y)*s , (uv.x-cr.x)*s+(uv.y-cr.y)*c  );
warp_20=`    newuv = newuv + cr;
warp_21=`    ///////////////////rotation////////////////
warp_22=`
warp_23=`    ///////////////////zoom////////////////
warp_24=`//    newuv = newuv-zcr;
warp_25=`    newuv = newuv * zoom;
warp_26=`    newuv= newuv+zcr;
warp_27=`    ///////////////////zoom////////////////
warp_28=`
warp_29=`
warp_30=`    float3 colorwarp = tex2D( sampler_main, newuv );
warp_31=`
warp_32=`    float3 color = tex2D(sampler_rand02, newuv ).xyz;
warp_33=`//    ret = ( (  (colorwarp*main*3-normalize(color)) ) );
warp_34=`    ret= lerp(colorwarp,main*color,1-sin((color-colorwarp)*6));
warp_35=`    // darken (decay) over time
warp_36=`//    ret *= 0.96; //or try: ret -= 0.004;
warp_37=`
warp_38=`
warp_39=`ret.xyz = tex2D(sampler_main, uv_orig).xyz*float3(.97,1,.97) - float3(.03,0,.03);
warp_40=`
warp_41=`ret.z += GetBlur1(uv_orig).z*.45;
warp_42=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_43=`                      ((uv.xyy*q27
warp_44=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_45=`                      ).xyz*
warp_46=`                      float3(1,1,0)*0.05 + 
warp_47=`                      time*float3(0,0,1)*q29
warp_48=`                     );
warp_49=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; 
warp_50=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; 
warp_51=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; 
warp_52=`ret.x += GetBlur1(uv_orig).z*.05 + GetBlur3(uv_orig).z*.05;
warp_53=`ret.z -= ret.y;
warp_54=`
warp_55=`float2 pixelsize = texsize.zw;
warp_56=`ret.y = saturate(tex2D( sampler_pw_main,uv_orig).y);
warp_57=`
warp_58=`float1 conway = tex2D( sampler_pw_main, uv_orig + float2(-1,-1)*pixelsize).y;
warp_59=`       conway += tex2D( sampler_pw_main, uv_orig + float2(0,-1)*pixelsize).y;
warp_60=`       conway += tex2D( sampler_pw_main, uv_orig + float2(1,-1)*pixelsize).y;
warp_61=`       conway += tex2D( sampler_pw_main, uv_orig + float2(-1,0)*pixelsize).y;
warp_62=`       conway += tex2D( sampler_pw_main, uv_orig + float2(1,0)*pixelsize).y;
warp_63=`       conway += tex2D( sampler_pw_main, uv_orig + float2(-1,1)*pixelsize).y;
warp_64=`       conway += tex2D( sampler_pw_main, uv_orig + float2(0,1)*pixelsize).y;
warp_65=`       conway += tex2D( sampler_pw_main, uv_orig + float2(1,1)*pixelsize).y;
warp_66=`
warp_67=`float1 test = q5*(1-GetBlur1(uv_orig).y)*(1-GetBlur2(uv_orig).y)*(1-GetBlur3(uv_orig).y);
warp_68=`
warp_69=`conway -= tex2D( sampler_pw_main, uv_orig).x;
warp_70=`
warp_71=`
warp_72=`if (conway > 1) {
warp_73=`if (saturate(ret.y) == 0) {
warp_74=`ret.y = floor(test*99)*1;
warp_75=`}
warp_76=`}
warp_77=`
warp_78=`ret.y -= ret.x;
warp_79=`
warp_80=`
warp_81=`ret.z=1-ret.y;
warp_82=`ret.y=1-ret.x;
warp_83=`ret.x=1-ret.z;
warp_84=`ret.xyz -= bass/7-mid/12 ;
warp_85=`}
comp_1=`shader_body
comp_2=`{
comp_3=`
comp_4=`//As a base, sample the main sampler at normal uv coordinates and store as return value:
comp_5=`ret = tex2D(sampler_main, uv).xyz;
comp_6=`
comp_7=`//Define the translation in (x,y)-direction and multiply by texsize.zw to convert the length to pixels:
comp_8=`float2 shift = float2(0,0)*texsize.zw; 
comp_9=`
comp_10=`//Take the original uv coordinates as a starting point, store in second set of coordinates:
comp_11=`float2 uv2 = uv;
comp_12=`
comp_13=`//Start iterations...
comp_14=`int n = 1;
comp_15=`while (n<=10) {
comp_16=`
comp_17=`//First step: put origin in center;
comp_18=`uv2 = uv2-.5;
comp_19=`
comp_20=`//Next, rotate by a factor we set in the per-frame equations - q32 is cos(angle) and q31 is sin(angle): 
comp_21=`uv2 = float2((uv2.x)*q32 - (uv2.y) * q31,(uv2.x)* q31 + (uv2.y) * q32)+.5;
comp_22=`
comp_23=`//Then, shift uv coordinates n times - see the step after the next as to why:
comp_24=`uv2 += n*shift;
comp_25=`
comp_26=`//Sample the main sampler at our new uv2 coordinates, 
comp_27=`//deduct the result from the current return value, 
comp_28=`//store in ret as absolute (difference) value:
comp_29=`ret = abs(ret-GetPixel(uv2));
comp_30=`
comp_31=`//Remove the shift so we won't rotate it with our coordinates in the next iteration:
comp_32=`uv2 -= n*shift;
comp_33=`
comp_34=`//Iteration +1
comp_35=`n++;
comp_36=`}
comp_37=`
comp_38=`}
